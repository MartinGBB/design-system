import * as _stitches_react_types_styled_component from '@stitches/react/types/styled-component';
import * as _stitches_react_types_css_util from '@stitches/react/types/css-util';
import * as react from 'react';
import { ComponentProps, ElementType } from 'react';
import * as Avatar$1 from '@radix-ui/react-avatar';
import * as Checkbox$1 from '@radix-ui/react-checkbox';
import * as _stitches_react_types_theme from '@stitches/react/types/theme';
import * as _stitches_react_types_css from '@stitches/react/types/css';
import * as _stitches_react_types_stitches from '@stitches/react/types/stitches';
import * as _stitches_react_types_util from '@stitches/react/types/util';

declare const Box: _stitches_react_types_styled_component.StyledComponent<"div", {}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface BoxProps extends ComponentProps<typeof Box> {
    as?: ElementType;
}

declare const Text: _stitches_react_types_styled_component.StyledComponent<"p", {
    size?: "xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "2xl" | "4xl" | "5xl" | "6xl" | "7xl" | "8xl" | "9xl" | undefined;
}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface TextProps extends ComponentProps<typeof Text> {
    as?: ElementType;
}

declare const Heading: _stitches_react_types_styled_component.StyledComponent<"h2", {
    size?: "sm" | "md" | "lg" | "2xl" | "4xl" | "5xl" | "6xl" | "3xl" | undefined;
}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface HeadingProps extends ComponentProps<typeof Heading> {
    as?: ElementType;
}

declare const AvatarImage: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<Avatar$1.AvatarImageProps & react.RefAttributes<HTMLImageElement>>, {}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

interface AvatarProps extends ComponentProps<typeof AvatarImage> {
}
declare function Avatar(props: AvatarProps): JSX.Element;
declare namespace Avatar {
    var displayName: string;
}

declare const Button: _stitches_react_types_styled_component.StyledComponent<"button", {
    variant?: "primary" | "secondary" | "tertiary" | undefined;
    size?: "sm" | "md" | undefined;
}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface ButtonProps extends ComponentProps<typeof Button> {
    as?: ElementType;
}

declare const TextInputContainer: _stitches_react_types_styled_component.StyledComponent<"div", {
    size?: "sm" | "md" | undefined;
}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const Input: _stitches_react_types_styled_component.StyledComponent<"input", {}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

interface TextInputProps extends Omit<ComponentProps<typeof Input>, 'size'> {
    prefix?: string;
    size?: ComponentProps<typeof TextInputContainer>['size'];
}
declare const TextInput: react.ForwardRefExoticComponent<Pick<TextInputProps, "height" | "width" | "color" | "translate" | "css" | "form" | "slot" | "style" | "title" | "pattern" | "hidden" | "size" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "nonce" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "children" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "list" | "step" | "alt" | "crossOrigin" | "src" | "type" | "max" | "min" | "name" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "value" | "accept" | "autoComplete" | "capture" | "checked" | "enterKeyHint" | "maxLength" | "minLength" | "multiple" | "readOnly" | "required"> & react.RefAttributes<HTMLInputElement>>;

declare const TextArea: _stitches_react_types_styled_component.StyledComponent<"textarea", {}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface TextAreaProps extends ComponentProps<typeof TextArea> {
}

declare const CheckboxContainer: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<Checkbox$1.CheckboxProps & react.RefAttributes<HTMLButtonElement>>, {}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

interface CheckboxProps extends ComponentProps<typeof CheckboxContainer> {
}
declare function Checkbox(props: CheckboxProps): JSX.Element;
declare namespace Checkbox {
    var displayName: string;
}

interface MultiStepProps {
    size: number;
    currentStep?: number;
}
declare function MultiStep({ size, currentStep }: MultiStepProps): JSX.Element;
declare namespace MultiStep {
    var displayName: string;
}

declare const styled: <Type extends _stitches_react_types_util.Function | keyof JSX.IntrinsicElements | react.ComponentType<any>, Composers extends (string | _stitches_react_types_util.Function | react.ComponentType<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.ComponentType<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : _stitches_react_types_util.WideObject) | undefined;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => _stitches_react_types_styled_component.StyledComponent<Type, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const css: <Composers extends (string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : _stitches_react_types_util.WideObject) | undefined;
} & CSS & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; } : never); }) => _stitches_react_types_styled_component.CssComponent<_stitches_react_types_styled_component.StyledComponentType<Composers>, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {}, CSS>;
declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? _stitches_react_types_css.AtRule.FontFace | _stitches_react_types_css.AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: _stitches_react_types_css_util.CSS<{}, {
        colors: {
            readonly white: "#FFF";
            readonly black: "#000";
            readonly gray100: "#E1E1E6";
            readonly gray200: "#A9A9B2";
            readonly gray400: "#7C7C8A";
            readonly gray500: "#505059";
            readonly gray600: "#323238";
            readonly gray700: "#29292E";
            readonly gray800: "#202024";
            readonly gray900: "#121214";
            readonly ignite300: "#00B37E";
            readonly ignite500: "#00875F";
            readonly ignite700: "#015F43";
            readonly ignite900: "#00291D";
            readonly test: "#FFF";
        };
        fontSizes: {
            readonly xxs: "0.625rem";
            readonly xs: "0.75rem";
            readonly sm: "0.875rem";
            readonly md: "1rem";
            readonly lg: "1.125rem";
            readonly xl: "1.25rem";
            readonly '2xl': "1.5rem";
            readonly '4xl': "2rem";
            readonly '5xl': "2.25rem";
            readonly '6xl': "3rem";
            readonly '7xl': "4rem";
            readonly '8xl': "4.5rem";
            readonly '9xl': "6rem";
        };
        fontWeights: {
            readonly regular: "400";
            readonly medium: "500";
            readonly bold: "700";
        };
        fonts: {
            readonly default: "Roboto, sans-serif";
            readonly code: "monospace";
        };
        lineHeights: {
            readonly shorter: "125%";
            readonly short: "140%";
            readonly base: "160%";
            readonly tall: "180%";
        };
        radii: {
            readonly px: "1px";
            readonly xs: "4px";
            readonly sm: "6px";
            readonly md: "8px";
            readonly lg: "16px";
            readonly full: "99999px";
        };
        space: {
            readonly 1: "0.25rem";
            readonly 2: "0.5rem";
            readonly 3: "0.75rem";
            readonly 4: "1rem";
            readonly 5: "1.25rem";
            readonly 6: "1.5rem";
            readonly 7: "1.75rem";
            readonly 8: "2rem";
            readonly 10: "2.5rem";
            readonly 12: "3rem";
            readonly 16: "4rem";
            readonly 20: "5rem";
            readonly 40: "10rem";
            readonly 64: "16rem";
            readonly 80: "20rem";
        };
    }, {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
} : K extends `@property ${string}` ? _stitches_react_types_css.AtRule.Property : _stitches_react_types_css_util.CSS<{}, {
    colors: {
        readonly white: "#FFF";
        readonly black: "#000";
        readonly gray100: "#E1E1E6";
        readonly gray200: "#A9A9B2";
        readonly gray400: "#7C7C8A";
        readonly gray500: "#505059";
        readonly gray600: "#323238";
        readonly gray700: "#29292E";
        readonly gray800: "#202024";
        readonly gray900: "#121214";
        readonly ignite300: "#00B37E";
        readonly ignite500: "#00875F";
        readonly ignite700: "#015F43";
        readonly ignite900: "#00291D";
        readonly test: "#FFF";
    };
    fontSizes: {
        readonly xxs: "0.625rem";
        readonly xs: "0.75rem";
        readonly sm: "0.875rem";
        readonly md: "1rem";
        readonly lg: "1.125rem";
        readonly xl: "1.25rem";
        readonly '2xl': "1.5rem";
        readonly '4xl': "2rem";
        readonly '5xl': "2.25rem";
        readonly '6xl': "3rem";
        readonly '7xl': "4rem";
        readonly '8xl': "4.5rem";
        readonly '9xl': "6rem";
    };
    fontWeights: {
        readonly regular: "400";
        readonly medium: "500";
        readonly bold: "700";
    };
    fonts: {
        readonly default: "Roboto, sans-serif";
        readonly code: "monospace";
    };
    lineHeights: {
        readonly shorter: "125%";
        readonly short: "140%";
        readonly base: "160%";
        readonly tall: "180%";
    };
    radii: {
        readonly px: "1px";
        readonly xs: "4px";
        readonly sm: "6px";
        readonly md: "8px";
        readonly lg: "16px";
        readonly full: "99999px";
    };
    space: {
        readonly 1: "0.25rem";
        readonly 2: "0.5rem";
        readonly 3: "0.75rem";
        readonly 4: "1rem";
        readonly 5: "1.25rem";
        readonly 6: "1.5rem";
        readonly 7: "1.75rem";
        readonly 8: "2rem";
        readonly 10: "2.5rem";
        readonly 12: "3rem";
        readonly 16: "4rem";
        readonly 20: "5rem";
        readonly 40: "10rem";
        readonly 64: "16rem";
        readonly 80: "20rem";
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>; })[]) => () => string;
declare const keyframes: (style: {
    [offset: string]: _stitches_react_types_css_util.CSS<{}, {
        colors: {
            readonly white: "#FFF";
            readonly black: "#000";
            readonly gray100: "#E1E1E6";
            readonly gray200: "#A9A9B2";
            readonly gray400: "#7C7C8A";
            readonly gray500: "#505059";
            readonly gray600: "#323238";
            readonly gray700: "#29292E";
            readonly gray800: "#202024";
            readonly gray900: "#121214";
            readonly ignite300: "#00B37E";
            readonly ignite500: "#00875F";
            readonly ignite700: "#015F43";
            readonly ignite900: "#00291D";
            readonly test: "#FFF";
        };
        fontSizes: {
            readonly xxs: "0.625rem";
            readonly xs: "0.75rem";
            readonly sm: "0.875rem";
            readonly md: "1rem";
            readonly lg: "1.125rem";
            readonly xl: "1.25rem";
            readonly '2xl': "1.5rem";
            readonly '4xl': "2rem";
            readonly '5xl': "2.25rem";
            readonly '6xl': "3rem";
            readonly '7xl': "4rem";
            readonly '8xl': "4.5rem";
            readonly '9xl': "6rem";
        };
        fontWeights: {
            readonly regular: "400";
            readonly medium: "500";
            readonly bold: "700";
        };
        fonts: {
            readonly default: "Roboto, sans-serif";
            readonly code: "monospace";
        };
        lineHeights: {
            readonly shorter: "125%";
            readonly short: "140%";
            readonly base: "160%";
            readonly tall: "180%";
        };
        radii: {
            readonly px: "1px";
            readonly xs: "4px";
            readonly sm: "6px";
            readonly md: "8px";
            readonly lg: "16px";
            readonly full: "99999px";
        };
        space: {
            readonly 1: "0.25rem";
            readonly 2: "0.5rem";
            readonly 3: "0.75rem";
            readonly 4: "1rem";
            readonly 5: "1.25rem";
            readonly 6: "1.5rem";
            readonly 7: "1.75rem";
            readonly 8: "2rem";
            readonly 10: "2.5rem";
            readonly 12: "3rem";
            readonly 16: "4rem";
            readonly 20: "5rem";
            readonly 40: "10rem";
            readonly 64: "16rem";
            readonly 80: "20rem";
        };
    }, {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
}) => {
    (): string;
    name: string;
};
declare const getCssText: () => string;
declare const theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        readonly white: _stitches_react_types_theme.Token<"white", string, "colors", "">;
        readonly black: _stitches_react_types_theme.Token<"black", string, "colors", "">;
        readonly gray100: _stitches_react_types_theme.Token<"gray100", string, "colors", "">;
        readonly gray200: _stitches_react_types_theme.Token<"gray200", string, "colors", "">;
        readonly gray400: _stitches_react_types_theme.Token<"gray400", string, "colors", "">;
        readonly gray500: _stitches_react_types_theme.Token<"gray500", string, "colors", "">;
        readonly gray600: _stitches_react_types_theme.Token<"gray600", string, "colors", "">;
        readonly gray700: _stitches_react_types_theme.Token<"gray700", string, "colors", "">;
        readonly gray800: _stitches_react_types_theme.Token<"gray800", string, "colors", "">;
        readonly gray900: _stitches_react_types_theme.Token<"gray900", string, "colors", "">;
        readonly ignite300: _stitches_react_types_theme.Token<"ignite300", string, "colors", "">;
        readonly ignite500: _stitches_react_types_theme.Token<"ignite500", string, "colors", "">;
        readonly ignite700: _stitches_react_types_theme.Token<"ignite700", string, "colors", "">;
        readonly ignite900: _stitches_react_types_theme.Token<"ignite900", string, "colors", "">;
        readonly test: _stitches_react_types_theme.Token<"test", string, "colors", "">;
    };
    fontSizes: {
        readonly xxs: _stitches_react_types_theme.Token<"xxs", string, "fontSizes", "">;
        readonly xs: _stitches_react_types_theme.Token<"xs", string, "fontSizes", "">;
        readonly sm: _stitches_react_types_theme.Token<"sm", string, "fontSizes", "">;
        readonly md: _stitches_react_types_theme.Token<"md", string, "fontSizes", "">;
        readonly lg: _stitches_react_types_theme.Token<"lg", string, "fontSizes", "">;
        readonly xl: _stitches_react_types_theme.Token<"xl", string, "fontSizes", "">;
        readonly '2xl': _stitches_react_types_theme.Token<"2xl", string, "fontSizes", "">;
        readonly '4xl': _stitches_react_types_theme.Token<"4xl", string, "fontSizes", "">;
        readonly '5xl': _stitches_react_types_theme.Token<"5xl", string, "fontSizes", "">;
        readonly '6xl': _stitches_react_types_theme.Token<"6xl", string, "fontSizes", "">;
        readonly '7xl': _stitches_react_types_theme.Token<"7xl", string, "fontSizes", "">;
        readonly '8xl': _stitches_react_types_theme.Token<"8xl", string, "fontSizes", "">;
        readonly '9xl': _stitches_react_types_theme.Token<"9xl", string, "fontSizes", "">;
    };
    fontWeights: {
        readonly regular: _stitches_react_types_theme.Token<"regular", string, "fontWeights", "">;
        readonly medium: _stitches_react_types_theme.Token<"medium", string, "fontWeights", "">;
        readonly bold: _stitches_react_types_theme.Token<"bold", string, "fontWeights", "">;
    };
    fonts: {
        readonly default: _stitches_react_types_theme.Token<"default", string, "fonts", "">;
        readonly code: _stitches_react_types_theme.Token<"code", string, "fonts", "">;
    };
    lineHeights: {
        readonly shorter: _stitches_react_types_theme.Token<"shorter", string, "lineHeights", "">;
        readonly short: _stitches_react_types_theme.Token<"short", string, "lineHeights", "">;
        readonly base: _stitches_react_types_theme.Token<"base", string, "lineHeights", "">;
        readonly tall: _stitches_react_types_theme.Token<"tall", string, "lineHeights", "">;
    };
    radii: {
        readonly px: _stitches_react_types_theme.Token<"px", string, "radii", "">;
        readonly xs: _stitches_react_types_theme.Token<"xs", string, "radii", "">;
        readonly sm: _stitches_react_types_theme.Token<"sm", string, "radii", "">;
        readonly md: _stitches_react_types_theme.Token<"md", string, "radii", "">;
        readonly lg: _stitches_react_types_theme.Token<"lg", string, "radii", "">;
        readonly full: _stitches_react_types_theme.Token<"full", string, "radii", "">;
    };
    space: {
        readonly 1: _stitches_react_types_theme.Token<"1", string, "space", "">;
        readonly 2: _stitches_react_types_theme.Token<"2", string, "space", "">;
        readonly 3: _stitches_react_types_theme.Token<"3", string, "space", "">;
        readonly 4: _stitches_react_types_theme.Token<"4", string, "space", "">;
        readonly 5: _stitches_react_types_theme.Token<"5", string, "space", "">;
        readonly 6: _stitches_react_types_theme.Token<"6", string, "space", "">;
        readonly 7: _stitches_react_types_theme.Token<"7", string, "space", "">;
        readonly 8: _stitches_react_types_theme.Token<"8", string, "space", "">;
        readonly 10: _stitches_react_types_theme.Token<"10", string, "space", "">;
        readonly 12: _stitches_react_types_theme.Token<"12", string, "space", "">;
        readonly 16: _stitches_react_types_theme.Token<"16", string, "space", "">;
        readonly 20: _stitches_react_types_theme.Token<"20", string, "space", "">;
        readonly 40: _stitches_react_types_theme.Token<"40", string, "space", "">;
        readonly 64: _stitches_react_types_theme.Token<"64", string, "space", "">;
        readonly 80: _stitches_react_types_theme.Token<"80", string, "space", "">;
    };
};
declare const createTheme: <Argument0 extends string | ({
    colors?: {
        readonly white?: string | number | boolean | undefined;
        readonly black?: string | number | boolean | undefined;
        readonly gray100?: string | number | boolean | undefined;
        readonly gray200?: string | number | boolean | undefined;
        readonly gray400?: string | number | boolean | undefined;
        readonly gray500?: string | number | boolean | undefined;
        readonly gray600?: string | number | boolean | undefined;
        readonly gray700?: string | number | boolean | undefined;
        readonly gray800?: string | number | boolean | undefined;
        readonly gray900?: string | number | boolean | undefined;
        readonly ignite300?: string | number | boolean | undefined;
        readonly ignite500?: string | number | boolean | undefined;
        readonly ignite700?: string | number | boolean | undefined;
        readonly ignite900?: string | number | boolean | undefined;
        readonly test?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        readonly xxs?: string | number | boolean | undefined;
        readonly xs?: string | number | boolean | undefined;
        readonly sm?: string | number | boolean | undefined;
        readonly md?: string | number | boolean | undefined;
        readonly lg?: string | number | boolean | undefined;
        readonly xl?: string | number | boolean | undefined;
        readonly '2xl'?: string | number | boolean | undefined;
        readonly '4xl'?: string | number | boolean | undefined;
        readonly '5xl'?: string | number | boolean | undefined;
        readonly '6xl'?: string | number | boolean | undefined;
        readonly '7xl'?: string | number | boolean | undefined;
        readonly '8xl'?: string | number | boolean | undefined;
        readonly '9xl'?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        readonly regular?: string | number | boolean | undefined;
        readonly medium?: string | number | boolean | undefined;
        readonly bold?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        readonly default?: string | number | boolean | undefined;
        readonly code?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        readonly shorter?: string | number | boolean | undefined;
        readonly short?: string | number | boolean | undefined;
        readonly base?: string | number | boolean | undefined;
        readonly tall?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        readonly px?: string | number | boolean | undefined;
        readonly xs?: string | number | boolean | undefined;
        readonly sm?: string | number | boolean | undefined;
        readonly md?: string | number | boolean | undefined;
        readonly lg?: string | number | boolean | undefined;
        readonly full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        readonly 1?: string | number | boolean | undefined;
        readonly 2?: string | number | boolean | undefined;
        readonly 3?: string | number | boolean | undefined;
        readonly 4?: string | number | boolean | undefined;
        readonly 5?: string | number | boolean | undefined;
        readonly 6?: string | number | boolean | undefined;
        readonly 7?: string | number | boolean | undefined;
        readonly 8?: string | number | boolean | undefined;
        readonly 10?: string | number | boolean | undefined;
        readonly 12?: string | number | boolean | undefined;
        readonly 16?: string | number | boolean | undefined;
        readonly 20?: string | number | boolean | undefined;
        readonly 40?: string | number | boolean | undefined;
        readonly 64?: string | number | boolean | undefined;
        readonly 80?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        readonly white?: string | number | boolean | undefined;
        readonly black?: string | number | boolean | undefined;
        readonly gray100?: string | number | boolean | undefined;
        readonly gray200?: string | number | boolean | undefined;
        readonly gray400?: string | number | boolean | undefined;
        readonly gray500?: string | number | boolean | undefined;
        readonly gray600?: string | number | boolean | undefined;
        readonly gray700?: string | number | boolean | undefined;
        readonly gray800?: string | number | boolean | undefined;
        readonly gray900?: string | number | boolean | undefined;
        readonly ignite300?: string | number | boolean | undefined;
        readonly ignite500?: string | number | boolean | undefined;
        readonly ignite700?: string | number | boolean | undefined;
        readonly ignite900?: string | number | boolean | undefined;
        readonly test?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        readonly xxs?: string | number | boolean | undefined;
        readonly xs?: string | number | boolean | undefined;
        readonly sm?: string | number | boolean | undefined;
        readonly md?: string | number | boolean | undefined;
        readonly lg?: string | number | boolean | undefined;
        readonly xl?: string | number | boolean | undefined;
        readonly '2xl'?: string | number | boolean | undefined;
        readonly '4xl'?: string | number | boolean | undefined;
        readonly '5xl'?: string | number | boolean | undefined;
        readonly '6xl'?: string | number | boolean | undefined;
        readonly '7xl'?: string | number | boolean | undefined;
        readonly '8xl'?: string | number | boolean | undefined;
        readonly '9xl'?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        readonly regular?: string | number | boolean | undefined;
        readonly medium?: string | number | boolean | undefined;
        readonly bold?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        readonly default?: string | number | boolean | undefined;
        readonly code?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        readonly shorter?: string | number | boolean | undefined;
        readonly short?: string | number | boolean | undefined;
        readonly base?: string | number | boolean | undefined;
        readonly tall?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        readonly px?: string | number | boolean | undefined;
        readonly xs?: string | number | boolean | undefined;
        readonly sm?: string | number | boolean | undefined;
        readonly md?: string | number | boolean | undefined;
        readonly lg?: string | number | boolean | undefined;
        readonly full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        readonly 1?: string | number | boolean | undefined;
        readonly 2?: string | number | boolean | undefined;
        readonly 3?: string | number | boolean | undefined;
        readonly 4?: string | number | boolean | undefined;
        readonly 5?: string | number | boolean | undefined;
        readonly 6?: string | number | boolean | undefined;
        readonly 7?: string | number | boolean | undefined;
        readonly 8?: string | number | boolean | undefined;
        readonly 10?: string | number | boolean | undefined;
        readonly 12?: string | number | boolean | undefined;
        readonly 16?: string | number | boolean | undefined;
        readonly 20?: string | number | boolean | undefined;
        readonly 40?: string | number | boolean | undefined;
        readonly 64?: string | number | boolean | undefined;
        readonly 80?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? _stitches_react_types_stitches.ThemeTokens<Argument1, ""> : _stitches_react_types_stitches.ThemeTokens<Argument0, "">);
declare const config: {
    prefix: "";
    media: {};
    theme: {
        colors: {
            readonly white: "#FFF";
            readonly black: "#000";
            readonly gray100: "#E1E1E6";
            readonly gray200: "#A9A9B2";
            readonly gray400: "#7C7C8A";
            readonly gray500: "#505059";
            readonly gray600: "#323238";
            readonly gray700: "#29292E";
            readonly gray800: "#202024";
            readonly gray900: "#121214";
            readonly ignite300: "#00B37E";
            readonly ignite500: "#00875F";
            readonly ignite700: "#015F43";
            readonly ignite900: "#00291D";
            readonly test: "#FFF";
        };
        fontSizes: {
            readonly xxs: "0.625rem";
            readonly xs: "0.75rem";
            readonly sm: "0.875rem";
            readonly md: "1rem";
            readonly lg: "1.125rem";
            readonly xl: "1.25rem";
            readonly '2xl': "1.5rem";
            readonly '4xl': "2rem";
            readonly '5xl': "2.25rem";
            readonly '6xl': "3rem";
            readonly '7xl': "4rem";
            readonly '8xl': "4.5rem";
            readonly '9xl': "6rem";
        };
        fontWeights: {
            readonly regular: "400";
            readonly medium: "500";
            readonly bold: "700";
        };
        fonts: {
            readonly default: "Roboto, sans-serif";
            readonly code: "monospace";
        };
        lineHeights: {
            readonly shorter: "125%";
            readonly short: "140%";
            readonly base: "160%";
            readonly tall: "180%";
        };
        radii: {
            readonly px: "1px";
            readonly xs: "4px";
            readonly sm: "6px";
            readonly md: "8px";
            readonly lg: "16px";
            readonly full: "99999px";
        };
        space: {
            readonly 1: "0.25rem";
            readonly 2: "0.5rem";
            readonly 3: "0.75rem";
            readonly 4: "1rem";
            readonly 5: "1.25rem";
            readonly 6: "1.5rem";
            readonly 7: "1.75rem";
            readonly 8: "2rem";
            readonly 10: "2.5rem";
            readonly 12: "3rem";
            readonly 16: "4rem";
            readonly 20: "5rem";
            readonly 40: "10rem";
            readonly 64: "16rem";
            readonly 80: "20rem";
        };
    };
    themeMap: {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {};
};

export { Avatar, AvatarProps, Box, BoxProps, Button, ButtonProps, Checkbox, CheckboxProps, Heading, HeadingProps, MultiStep, MultiStepProps, Text, TextArea, TextAreaProps, TextInput, TextInputProps, TextProps, config, createTheme, css, getCssText, globalCss, keyframes, styled, theme };
